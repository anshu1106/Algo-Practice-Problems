import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Euler4 {
	
	public static void main(String args[])
	{
int cases;
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		long num;
		long result=1;
		
		try {
			cases=Integer.parseInt(br.readLine());
			for(int count=0;count<cases;count++)
			{
				num = Long.parseLong(br.readLine());
				result=findGreatestPalindrome(num);
				
				System.out.println(result);
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private static long findGreatestPalindrome(long number) {
		// TODO Auto-generated method stub
		long product;
		long result = 0;
		for(int i =101;i<=999;i++)
		{
			for (int j=101;j<=999;j++)
			{
				product = i*j;
				if(product>result && product<number  && isPalindrome(product))
				{
					result=product;
				}
			}
		}
		return result;
	}

	private static boolean isPalindrome(long product) {
		// TODO Auto-generated method stub
		String s =String.valueOf(product);
		String reverse = new StringBuffer(s).reverse().toString();
		if(s.equals(reverse))
		{
			return true;

		}
		return false;
	}

}
